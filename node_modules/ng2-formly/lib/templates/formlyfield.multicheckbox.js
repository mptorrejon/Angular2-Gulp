"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var formly_event_emitter_1 = require("../services/formly.event.emitter");
var formly_messages_1 = require("../services/formly.messages");
var field_1 = require("./field");
var common_1 = require("@angular/common");
var FormlyFieldMultiCheckbox = (function (_super) {
    __extends(FormlyFieldMultiCheckbox, _super);
    function FormlyFieldMultiCheckbox(fm, fps, formBuilder) {
        _super.call(this, fm, fps);
        this.fps = fps;
        this.formBuilder = formBuilder;
    }
    FormlyFieldMultiCheckbox.prototype.inputChange = function (e, val) {
        this._model[val] = e.target.checked;
        this.changeFn.emit(new formly_event_emitter_1.FormlyValueChangeEvent(this.key, this._model));
        this.fps.setUpdated(true);
    };
    FormlyFieldMultiCheckbox.prototype.createControl = function () {
        var _this = this;
        var controlGroupConfig = this.templateOptions.options.reduce(function (previous, option) {
            previous[option.key] = [_this._model ? _this._model[option.key] : undefined];
            return previous;
        }, {});
        return this.formBuilder.group(controlGroupConfig);
    };
    FormlyFieldMultiCheckbox = __decorate([
        core_1.Component({
            selector: "formly-field-multicheckbox",
            template: "\n        <div [ngFormModel]=\"form\">\n            <div [ngControlGroup]=\"key\" class=\"form-group\">\n                <label class=\"form-control-label\" for=\"\">{{templateOptions.label}}</label>\n                <div *ngFor=\"let option of templateOptions.options\">\n                    <label class=\"c-input c-radio\">\n                        <input type=\"checkbox\" name=\"choose\" value=\"{{option.value}}\" [ngControl]=\"option.key\"\n                          [(ngModel)]=\"model[option.key]\" (change)=\"inputChange($event, option.key)\">{{option.value}}\n                        <span class=\"c-indicator\"></span>\n                    </label>\n                </div>\n                <small class=\"text-muted\">{{templateOptions.description}}</small>\n            </div>\n        </div>\n    ",
            inputs: ["form", "update", "templateOptions", "key", "field", "formModel", "model"]
        }), 
        __metadata('design:paramtypes', [formly_messages_1.FormlyMessages, formly_event_emitter_1.FormlyPubSub, common_1.FormBuilder])
    ], FormlyFieldMultiCheckbox);
    return FormlyFieldMultiCheckbox;
}(field_1.Field));
exports.FormlyFieldMultiCheckbox = FormlyFieldMultiCheckbox;
//# sourceMappingURL=formlyfield.multicheckbox.js.map