"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var formly_messages_1 = require("./../services/formly.messages");
var formly_event_emitter_1 = require("./../services/formly.event.emitter");
var field_1 = require("./field");
var FormlyFieldInput = (function (_super) {
    __extends(FormlyFieldInput, _super);
    function FormlyFieldInput(fm, ps, elem) {
        _super.call(this, fm, ps);
        this.elem = elem;
    }
    FormlyFieldInput.prototype.ngAfterViewInit = function () {
        if (this.templateOptions.focus) {
            this.elem.nativeElement.querySelector("input").focus();
        }
    };
    FormlyFieldInput = __decorate([
        core_1.Component({
            selector: "formly-field-input",
            template: "\n    <div class=\"form-group\" [ngFormModel]=\"form\" [ngClass]=\"{'has-danger': !formControl.valid}\" *ngIf=\"!templateOptions.hidden\">\n      <label attr.for=\"{{key}}\" class=\"form-control-label\">{{templateOptions.label}}</label>\n        <input type=\"{{templateOptions.type}}\" [ngControl]=\"key\" class=\"form-control\" id=\"{{key}}\"\n          placeholder=\"{{templateOptions.placeholder}}\" [disabled]=\"templateOptions.disabled\"\n          (keyup)=\"inputChange($event, 'value')\" (change)=\"inputChange($event, 'value')\" [(ngModel)]=\"model\"\n          [ngClass]=\"{'form-control-danger': !form.controls[key].valid}\">\n        <small class=\"text-muted\">{{templateOptions.description}}</small>\n        <small class=\"text-muted text-danger\"><formly-message [control]=\"key\"></formly-message></small>\n      </div>\n    ",
            directives: [formly_messages_1.FormlyMessage],
            inputs: ["form", "update", "templateOptions", "key", "field", "formModel", "model"]
        }), 
        __metadata('design:paramtypes', [formly_messages_1.FormlyMessages, formly_event_emitter_1.FormlyPubSub, core_1.ElementRef])
    ], FormlyFieldInput);
    return FormlyFieldInput;
}(field_1.Field));
exports.FormlyFieldInput = FormlyFieldInput;
//# sourceMappingURL=formlyfield.input.js.map