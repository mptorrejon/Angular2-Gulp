"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var formly_config_1 = require("../services/formly.config");
var formly_messages_1 = require("../services/formly.messages");
var templates_1 = require("./templates");
var core_1 = require("@angular/core");
var FormlyBootstrap = (function () {
    function FormlyBootstrap(fc, fm) {
        fm.addStringMessage("required", "This field is required.");
        fm.addStringMessage("invalidEmailAddress", "Invalid Email Address");
        fm.addStringMessage("maxlength", "Maximum Length Exceeded.");
        fm.addStringMessage("minlength", "Should have atleast 2 Characters");
        ["input", "checkbox", "radio", "select"].forEach(function (field) {
            fc.setType({
                name: field,
                component: templates_1.TemplateDirectives[field]
            });
        });
    }
    FormlyBootstrap = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [formly_config_1.FormlyConfig, formly_messages_1.FormlyMessages])
    ], FormlyBootstrap);
    return FormlyBootstrap;
}());
exports.FormlyBootstrap = FormlyBootstrap;
//# sourceMappingURL=formlyBootstrap.js.map