"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var FormlyMessages = (function () {
    function FormlyMessages() {
        this.messages = {};
    }
    FormlyMessages.prototype.addStringMessage = function (validator, message) {
        this.messages[validator] = message;
    };
    FormlyMessages.prototype.getMessages = function () {
        return this.messages;
    };
    FormlyMessages.prototype.getValidatorErrorMessage = function (prop) {
        return this.messages[prop];
    };
    FormlyMessages = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], FormlyMessages);
    return FormlyMessages;
}());
exports.FormlyMessages = FormlyMessages;
var FormlyMessage = (function () {
    function FormlyMessage(_formDir, fm) {
        this._formDir = _formDir;
        this.fm = fm;
    }
    Object.defineProperty(FormlyMessage.prototype, "errorMessage", {
        get: function () {
            var c = this._formDir.form.find(this.control);
            for (var propertyName in c.errors) {
                if (c.errors.hasOwnProperty(propertyName)) {
                    return this.fm.getValidatorErrorMessage(propertyName);
                }
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], FormlyMessage.prototype, "control", void 0);
    FormlyMessage = __decorate([
        core_1.Component({
            selector: "formly-message",
            template: "<div *ngIf=\"errorMessage !== null\">{{errorMessage}}</div>"
        }),
        __param(0, core_1.Host()), 
        __metadata('design:paramtypes', [common_1.NgFormModel, FormlyMessages])
    ], FormlyMessage);
    return FormlyMessage;
}());
exports.FormlyMessage = FormlyMessage;
//# sourceMappingURL=formly.messages.js.map