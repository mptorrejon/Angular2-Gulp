"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var formly_field_delegates_1 = require("../services/formly.field.delegates");
var FormlyCommon = (function () {
    function FormlyCommon(elem, ps, formlyConfig) {
        this.elem = elem;
        this.ps = ps;
        this.formlyConfig = formlyConfig;
        this.formSubmit = new core_1.EventEmitter();
        this.visibilityDelegate = new formly_field_delegates_1.FormlyFieldVisibilityDelegate(this);
        this.expressionDelegate = new formly_field_delegates_1.FormlyFieldExpressionDelegate(this);
    }
    Object.defineProperty(FormlyCommon.prototype, "model", {
        get: function () {
            return this._model;
        },
        set: function (value) {
            this._model = value;
            this.ps.Stream.emit(this.form);
        },
        enumerable: true,
        configurable: true
    });
    ;
    FormlyCommon.prototype.isHidden = function () {
        return this.hide;
    };
    FormlyCommon.prototype.setHidden = function (cond) {
        this.hide = cond;
        this.elem.nativeElement.style.display = cond ? "none" : "";
        if (this.field.fieldGroup) {
            for (var i = 0; i < this.field.fieldGroup.length; i++) {
                this.psEmit(this.field.fieldGroup[i].key, "hidden", this.hide);
            }
        }
        else {
            this.psEmit(this.field.key, "hidden", this.hide);
        }
    };
    FormlyCommon.prototype.psEmit = function (fieldKey, eventKey, value) {
        if (this.ps && this.ps.getEmitter(fieldKey) && this.ps.getEmitter(fieldKey).emit) {
            this.ps.getEmitter(fieldKey).emit({
                key: eventKey,
                value: value
            });
        }
    };
    FormlyCommon.prototype.ngDoCheck = function () {
        this.visibilityDelegate.checkVisibilityChange();
        this.expressionDelegate.checkExpressionChange();
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], FormlyCommon.prototype, "formModel", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], FormlyCommon.prototype, "field", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], FormlyCommon.prototype, "form", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], FormlyCommon.prototype, "key", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], FormlyCommon.prototype, "hide", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], FormlyCommon.prototype, "formSubmit", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], FormlyCommon.prototype, "model", null);
    return FormlyCommon;
}());
exports.FormlyCommon = FormlyCommon;
//# sourceMappingURL=formly.common.component.js.map