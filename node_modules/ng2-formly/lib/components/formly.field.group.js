"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var formly_common_component_1 = require("./formly.common.component");
var formly_event_emitter_1 = require("../services/formly.event.emitter");
var formly_config_1 = require("../services/formly.config");
var formly_field_1 = require("./formly.field");
var FormlyFieldGroup = (function (_super) {
    __extends(FormlyFieldGroup, _super);
    function FormlyFieldGroup(elem, ps, formlyConfig) {
        _super.call(this, elem, ps, formlyConfig);
        this.elem = elem;
        this.ps = ps;
        this.formlyConfig = formlyConfig;
        this.changeFn = new core_1.EventEmitter();
    }
    FormlyFieldGroup.prototype.ngOnInit = function () {
        if (!this.fields) {
            this.fields = this.field.fieldGroup;
        }
    };
    FormlyFieldGroup.prototype.changeFunction = function (event, field) {
        if (this.key && this.key === event.key) {
            this._model = event.value;
            this.changeFn.emit(event);
            this.formSubmit.emit(event);
        }
        else if (this.key && this.key !== event.key) {
            this._model[event.key] = event.value;
            this.changeFn.emit(new formly_event_emitter_1.FormlyValueChangeEvent(this.key, this._model));
            this.formSubmit.emit(event);
        }
        else {
            this.changeFn.emit(event);
            this.formSubmit.emit(event);
        }
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], FormlyFieldGroup.prototype, "eventEmitter", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], FormlyFieldGroup.prototype, "changeFn", void 0);
    FormlyFieldGroup = __decorate([
        core_1.Component({
            selector: "formly-field-group",
            template: "\n        <div class=\"formly-field\"\n          *ngFor=\"let f of field.fieldGroup\">\n          <formly-field [hide]=\"f.hideExpression\" [model]=\"model?model[f.key]:''\" [key]=\"f.key\" [form]=\"form\" [field]=\"f\"\n            [formModel] = \"formModel\" (changeFn)=\"changeFunction($event, f)\" [ngClass]=\"f.className\" [eventEmitter]=\"eventEmitter\">\n          </formly-field>\n          <formly-field-group *ngIf=\"f.fieldGroup\" [hide]=\"field.hideExpression\" [model]=\"f.key ? model[f.key]: model\" [key]=\"f.key\" [form]=\"form\" [field]=\"f\"\n            [fields]=\"f.fieldGroup\" [formModel]= \"formModel\" (changeFn)=\"changeFunction($event, f)\" [eventEmitter]=\"event\">\n          </formly-field-group>\n        </div> \n    ",
            directives: [formly_field_1.FormlyField],
            inputs: ["field", "formModel", "form", "hide", "model", "key", "fields"]
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef, formly_event_emitter_1.FormlyPubSub, formly_config_1.FormlyConfig])
    ], FormlyFieldGroup);
    return FormlyFieldGroup;
}(formly_common_component_1.FormlyCommon));
exports.FormlyFieldGroup = FormlyFieldGroup;
//# sourceMappingURL=formly.field.group.js.map