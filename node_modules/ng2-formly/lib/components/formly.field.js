"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var formly_common_component_1 = require("./formly.common.component");
var formly_event_emitter_1 = require("../services/formly.event.emitter");
var formly_field_builder_1 = require("../services/formly.field.builder");
var formly_config_1 = require("../services/formly.config");
var DivComponent = (function () {
    function DivComponent(viewContainer) {
        this.viewContainer = viewContainer;
    }
    DivComponent = __decorate([
        core_1.Directive({
            selector: "[child-host]"
        }), 
        __metadata('design:paramtypes', [core_1.ViewContainerRef])
    ], DivComponent);
    return DivComponent;
}());
exports.DivComponent = DivComponent;
var FormlyField = (function (_super) {
    __extends(FormlyField, _super);
    function FormlyField(elem, ps, fb, formlyConfig) {
        _super.call(this, elem, ps, formlyConfig);
        this.fb = fb;
        this.changeFn = new core_1.EventEmitter();
        this.modelUpdateEmitter = new core_1.EventEmitter();
    }
    FormlyField.prototype.ngOnInit = function () {
        this.createChildFields();
    };
    FormlyField.prototype.ngAfterViewInit = function () { };
    FormlyField.prototype.createChildFields = function () {
        var _this = this;
        if (this.field && !this.field.template && !this.field.fieldGroup) {
            this.update = new formly_event_emitter_1.FormlyEventEmitter();
            this.fb.createChildFields(this.field, this, this.formlyConfig).then(function (ref) {
                _this.childFieldRef = ref;
                _this.childFieldRef.instance.modelUpdateReceiver = _this.modelUpdateEmitter;
                ref.instance.changeFn.subscribe(function (event) {
                    _this.changeFunction(event, _this.field);
                });
            });
            this.ps.setEmitter(this.key, this.update);
        }
    };
    FormlyField.prototype.changeFunction = function (event, field) {
        if (this.key && this.key === event.key) {
            this._model = event.value;
            this.changeFn.emit(event);
            this.formSubmit.emit(event);
        }
        else if (this.key && this.key !== event.key) {
            this._model[event.key] = event.value;
            this.changeFn.emit(new formly_event_emitter_1.FormlyValueChangeEvent(this.key, this._model));
            this.formSubmit.emit(event);
        }
        else {
            this.changeFn.emit(event);
            this.formSubmit.emit(event);
        }
    };
    FormlyField.prototype.ngOnChanges = function (changes) {
        if (changes["model"]) {
            this.modelUpdateEmitter.emit(changes["model"].currentValue);
        }
    };
    __decorate([
        core_1.ViewChild(DivComponent), 
        __metadata('design:type', DivComponent)
    ], FormlyField.prototype, "myChild", void 0);
    FormlyField = __decorate([
        core_1.Component({
            selector: "formly-field",
            template: "\n        <div child-host #child></div>\n        <div *ngIf=\"field.template\" [innerHtml]=\"field.template\"></div>\n    ",
            directives: [FormlyField, DivComponent],
            inputs: ["field", "formModel", "form", "hide", "model", "key", "eventEmitter"],
            outputs: ["formSubmit", "changeFn", "eventEmitter"]
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef, formly_event_emitter_1.FormlyPubSub, formly_field_builder_1.FormlyFieldBuilder, formly_config_1.FormlyConfig])
    ], FormlyField);
    return FormlyField;
}(formly_common_component_1.FormlyCommon));
exports.FormlyField = FormlyField;
//# sourceMappingURL=formly.field.js.map