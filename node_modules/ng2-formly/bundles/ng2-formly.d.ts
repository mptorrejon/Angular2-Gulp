declare module "services/formly.expression" {
    export function evalExpression(expression: string, thisArg: any, argNames: string[], argVal: any[]): any;
    export function expressionValueSetter(expression: string, expressionValue: any, thisArg: any, argNames: string[], argVal: any[]): any;
}
declare module "services/formly.field.delegates" {
    import { FormlyCommon } from "components/formly.common.component";
    export class FormlyFieldVisibilityDelegate {
        private formlyCommon;
        constructor(formlyCommon: FormlyCommon);
        eval(expression: string | Function | boolean): boolean;
        hasHideExpression(): boolean;
        checkVisibilityChange(): void;
    }
    export class FormlyFieldExpressionDelegate {
        private formlyCommon;
        constructor(formlyCommon: FormlyCommon);
        hasExpression(): boolean;
        checkExpressionChange(): void;
    }
}
declare module "services/formly.event.emitter" {
    import { Subject } from "rxjs/Subject";
    export class FormlyValueChangeEvent {
        key: string;
        value: any;
        constructor(key: string, value: any);
    }
    export class FormlyEventEmitter extends Subject<String> {
        constructor();
        emit(value: any): void;
    }
    export class FormlyPubSub {
        Stream: FormlyEventEmitter;
        emitters: {};
        updated: boolean;
        constructor();
        getUpdated(): boolean;
        setUpdated(value: any): void;
        setEmitter(key: any, emitter: any): void;
        getEmitter(key: any): any;
    }
}
declare module "services/formly.config" {
    import { ViewContainerRef, Type } from "@angular/core";
    export class FormlyConfig {
        types: {
            [name: string]: Type;
        };
        manipulators: {
            [name: string]: TemplateManipulator;
        };
        setType(options: TypeOption): void;
        getDirectives(): {
            [name: string]: Type;
        };
        getDirective(name: string): Type;
        addTemplateManipulator(option: TemplateManipulatorOption): void;
        getManipulator(name: string): TemplateManipulator;
    }
    export interface TypeOption {
        name: string;
        component: any;
    }
    export interface TemplateManipulatorOption {
        name: string;
        manipulator: TemplateManipulator;
    }
    export interface TemplateManipulator {
        preProcess(ref: ViewContainerRef): void;
        postProcess(ref: ViewContainerRef): void;
    }
}
declare module "components/formly.field.config" {
    export interface FormlyFieldConfig {
        key?: string;
        templateOptions?: FormlyTemplateOptions;
        validation?: any;
        template?: string;
        fieldGroup?: Array<FormlyFieldConfig>;
        hideExpression?: boolean | string | (() => boolean);
        className?: string;
        type?: string;
        expressionProperties?: any;
        focus?: boolean;
    }
    export interface FormlyTemplateOptions {
        type?: string;
        label?: string;
        placeholder?: string;
        disabled?: Boolean;
        options?: Array<any>;
        rows?: number;
        cols?: number;
        description?: string;
        focus?: boolean;
        hidden?: boolean;
    }
}
declare module "components/formly.common.component" {
    import { EventEmitter, ElementRef } from "@angular/core";
    import { FormlyFieldExpressionDelegate, FormlyFieldVisibilityDelegate } from "services/formly.field.delegates";
    import { FormlyPubSub } from "services/formly.event.emitter";
    import { FormlyConfig } from "services/formly.config";
    import { FormlyFieldConfig } from "components/formly.field.config";
    export class FormlyCommon {
        protected elem: ElementRef;
        protected ps: FormlyPubSub;
        protected formlyConfig: FormlyConfig;
        formModel: any;
        field: FormlyFieldConfig;
        form: any;
        key: string;
        hide: any;
        formSubmit: EventEmitter<{}>;
        protected _model: any;
        update: any;
        visibilityDelegate: FormlyFieldVisibilityDelegate;
        expressionDelegate: FormlyFieldExpressionDelegate;
        constructor(elem: ElementRef, ps: FormlyPubSub, formlyConfig: FormlyConfig);
        model: any;
        isHidden(): any;
        setHidden(cond: boolean): void;
        private psEmit(fieldKey, eventKey, value);
        ngDoCheck(): void;
    }
}
declare module "services/formly.field.builder" {
    import { ComponentResolver, ComponentRef } from "@angular/core";
    import { FormlyFieldConfig } from "components/formly.field.config";
    import { FormlyConfig } from "services/formly.config";
    import { FormlyField } from "components/formly.field";
    export class FormlyFieldBuilder {
        protected cr: ComponentResolver;
        fc: FormlyConfig;
        constructor(cr: ComponentResolver);
        createChildFields(fieldConfig: FormlyFieldConfig, formlyField: FormlyField, formlyConfig: FormlyConfig): Promise<ComponentRef<any>>;
    }
}
declare module "services/formly.messages" {
    import { NgFormModel } from "@angular/common";
    export class FormlyMessages {
        messages: {};
        constructor();
        addStringMessage(validator: any, message: any): void;
        getMessages(): {};
        getValidatorErrorMessage(prop: any): any;
    }
    export class FormlyMessage {
        private _formDir;
        protected fm: FormlyMessages;
        control: string;
        constructor(_formDir: NgFormModel, fm: FormlyMessages);
        errorMessage: any;
    }
}
declare module "templates/field" {
    import { EventEmitter, OnInit } from "@angular/core";
    import { FormlyMessages } from "services/formly.messages";
    import { FormlyPubSub } from "services/formly.event.emitter";
    import { FormlyTemplateOptions, FormlyFieldConfig } from "components/formly.field.config";
    import { AbstractControl } from "@angular/common";
    export class Field implements OnInit {
        private ps;
        form: any;
        update: any;
        templateOptions: FormlyTemplateOptions;
        key: string;
        field: FormlyFieldConfig;
        formModel: any;
        changeFn: EventEmitter<any>;
        messages: any;
        _control: AbstractControl;
        _model: any;
        _modelUpdateReceiver: EventEmitter<any>;
        modelUpdateReceiver: EventEmitter<any>;
        model: any;
        constructor(fm: FormlyMessages, ps: FormlyPubSub);
        ngOnInit(): void;
        inputChange(e: any, val: any): void;
        formControl: AbstractControl;
        createControl(): AbstractControl;
    }
}
declare module "components/formly.field" {
    import { OnInit, EventEmitter, ElementRef, ViewContainerRef, SimpleChange, OnChanges } from "@angular/core";
    import { FormlyCommon } from "components/formly.common.component";
    import { FormlyPubSub, FormlyValueChangeEvent } from "services/formly.event.emitter";
    import { FormlyFieldBuilder } from "services/formly.field.builder";
    import { FormlyConfig } from "services/formly.config";
    export class DivComponent {
        viewContainer: ViewContainerRef;
        constructor(viewContainer: ViewContainerRef);
    }
    export class FormlyField extends FormlyCommon implements OnInit, OnChanges {
        protected fb: FormlyFieldBuilder;
        eventEmitter: any;
        changeFn: EventEmitter<any>;
        update: any;
        modelUpdateEmitter: EventEmitter<any>;
        myChild: DivComponent;
        private childFieldRef;
        constructor(elem: ElementRef, ps: FormlyPubSub, fb: FormlyFieldBuilder, formlyConfig: FormlyConfig);
        ngOnInit(): any;
        ngAfterViewInit(): void;
        createChildFields(): void;
        changeFunction(event: FormlyValueChangeEvent, field: any): void;
        ngOnChanges(changes: {
            [key: string]: SimpleChange;
        }): any;
    }
}
declare module "components/formly.field.group" {
    import { OnInit, EventEmitter, ElementRef } from "@angular/core";
    import { FormlyCommon } from "components/formly.common.component";
    import { FormlyPubSub, FormlyValueChangeEvent } from "services/formly.event.emitter";
    import { FormlyConfig } from "services/formly.config";
    import { FormlyFieldConfig } from "components/formly.field.config";
    export class FormlyFieldGroup extends FormlyCommon implements OnInit {
        protected elem: ElementRef;
        protected ps: FormlyPubSub;
        protected formlyConfig: FormlyConfig;
        fields: FormlyFieldConfig[];
        eventEmitter: any;
        changeFn: EventEmitter<any>;
        update: any;
        constructor(elem: ElementRef, ps: FormlyPubSub, formlyConfig: FormlyConfig);
        ngOnInit(): any;
        changeFunction(event: FormlyValueChangeEvent, field: any): void;
    }
}
declare module "components/formly.form" {
    import { OnInit, ElementRef } from "@angular/core";
    import { NgFormModel, FormBuilder } from "@angular/common";
    import { FormlyPubSub, FormlyValueChangeEvent } from "services/formly.event.emitter";
    import { FormlyFieldGroup } from "components/formly.field.group";
    import { FormlyConfig } from "services/formly.config";
    export class FormlyForm extends FormlyFieldGroup implements OnInit {
        protected _fm: NgFormModel;
        private fb;
        event: any;
        constructor(elem: ElementRef, _fm: NgFormModel, ps: FormlyPubSub, fb: FormBuilder, formlyConfig: FormlyConfig);
        ngOnInit(): void;
        changeFunction(event: FormlyValueChangeEvent, field: any): void;
    }
}
declare module "services/formly.providers" {
    import { FormlyPubSub } from "services/formly.event.emitter";
    import { FormlyMessages } from "services/formly.messages";
    import { FormlyFieldBuilder } from "services/formly.field.builder";
    export const FormlyProviders: (typeof FormlyPubSub | typeof FormlyMessages | typeof FormlyFieldBuilder)[];
}
declare module "services/formly.processor" {
    import { FormlyFieldConfig } from "components/formly.field.config";
    export interface FormlyConfigVisitor {
        visit(config: FormlyFieldConfig): any;
    }
    export class FormlyConfigProcessor {
        visitors: FormlyConfigVisitor[];
        process(fieldConfigs: FormlyFieldConfig[]): void;
    }
}
declare module "core" {
    export { FormlyCommon } from "components/formly.common.component";
    export { FormlyField } from "components/formly.field";
    export { FormlyFieldConfig } from "components/formly.field.config";
    export { FormlyForm } from "components/formly.form";
    export { FormlyConfig } from "services/formly.config";
    export { FormlyPubSub, FormlyEventEmitter } from "services/formly.event.emitter";
    export { FormlyMessage, FormlyMessages } from "services/formly.messages";
    export { FormlyFieldVisibilityDelegate } from "services/formly.field.delegates";
    export { FormlyProviders } from "services/formly.providers";
    export { FormlyConfigProcessor } from "services/formly.processor";
}
declare module "templates/formlyfield.checkbox" {
    import { Field } from "templates/field";
    import { FormlyMessages } from "services/formly.messages";
    import { FormlyPubSub } from "services/formly.event.emitter";
    import { AbstractControl, FormBuilder } from "@angular/common";
    export class FormlyFieldCheckbox extends Field {
        private formBuilder;
        constructor(fm: FormlyMessages, ps: FormlyPubSub, formBuilder: FormBuilder);
        createControl(): AbstractControl;
    }
}
declare module "templates/formlyfield.multicheckbox" {
    import { FormlyPubSub } from "services/formly.event.emitter";
    import { FormlyMessages } from "services/formly.messages";
    import { Field } from "templates/field";
    import { FormBuilder, AbstractControl } from "@angular/common";
    export class FormlyFieldMultiCheckbox extends Field {
        private fps;
        private formBuilder;
        constructor(fm: FormlyMessages, fps: FormlyPubSub, formBuilder: FormBuilder);
        inputChange(e: any, val: any): void;
        createControl(): AbstractControl;
    }
}
declare module "templates/formlyfield.input" {
    import { ElementRef, AfterViewInit } from "@angular/core";
    import { FormlyMessages } from "services/formly.messages";
    import { FormlyPubSub } from "services/formly.event.emitter";
    import { Field } from "templates/field";
    export class FormlyFieldInput extends Field implements AfterViewInit {
        private elem;
        constructor(fm: FormlyMessages, ps: FormlyPubSub, elem: ElementRef);
        ngAfterViewInit(): void;
    }
}
declare module "templates/formlyfield.radio" {
    import { FormlyPubSub } from "services/formly.event.emitter";
    import { FormlyMessages } from "services/formly.messages";
    import { Field } from "templates/field";
    import { AbstractControl, FormBuilder } from "@angular/common";
    export class FormlyFieldRadio extends Field {
        private formBuilder;
        constructor(fm: FormlyMessages, ps: FormlyPubSub, formBuilder: FormBuilder);
        createControl(): AbstractControl;
    }
}
declare module "templates/formlyfield.textarea" {
    import { AfterViewInit, ElementRef } from "@angular/core";
    import { FormlyPubSub } from "services/formly.event.emitter";
    import { FormlyMessages } from "services/formly.messages";
    import { Field } from "templates/field";
    export class FormlyFieldTextArea extends Field implements AfterViewInit {
        private elem;
        constructor(fm: FormlyMessages, ps: FormlyPubSub, elem: ElementRef);
        ngAfterViewInit(): void;
    }
}
declare module "templates/formlyfield.select" {
    import { FormlyPubSub } from "services/formly.event.emitter";
    import { FormlyMessages } from "services/formly.messages";
    import { Field } from "templates/field";
    export class FormlyFieldSelect extends Field {
        constructor(fm: FormlyMessages, ps: FormlyPubSub);
    }
}
declare module "templates/templates" {
    import { FormlyFieldInput } from "templates/formlyfield.input";
    import { FormlyFieldCheckbox } from "templates/formlyfield.checkbox";
    import { FormlyFieldRadio } from "templates/formlyfield.radio";
    import { FormlyFieldSelect } from "templates/formlyfield.select";
    import { FormlyFieldTextArea } from "templates/formlyfield.textarea";
    import { FormlyFieldMultiCheckbox } from "templates/formlyfield.multicheckbox";
    export const TemplateDirectives: {
        input: typeof FormlyFieldInput;
        checkbox: typeof FormlyFieldCheckbox;
        radio: typeof FormlyFieldRadio;
        select: typeof FormlyFieldSelect;
        textarea: typeof FormlyFieldTextArea;
        multicheckbox: typeof FormlyFieldMultiCheckbox;
    };
}
declare module "templates/formlyBootstrap" {
    import { FormlyConfig } from "services/formly.config";
    import { FormlyMessages } from "services/formly.messages";
    export class FormlyBootstrap {
        constructor(fc: FormlyConfig, fm: FormlyMessages);
    }
}
declare module "templates" {
    export { FormlyFieldCheckbox } from "templates/formlyfield.checkbox";
    export { FormlyFieldMultiCheckbox } from "templates/formlyfield.multicheckbox";
    export { FormlyFieldInput } from "templates/formlyfield.input";
    export { FormlyFieldRadio } from "templates/formlyfield.radio";
    export { FormlyFieldTextArea } from "templates/formlyfield.textarea";
    export { FormlyFieldSelect } from "templates/formlyfield.select";
    export { Field } from "templates/field";
    export { TemplateDirectives } from "templates/templates";
    export { FormlyBootstrap } from "templates/formlyBootstrap";
}
declare module "index" {
    export * from "core";
    export * from "templates";
}
