{"version":3,"file":"progress-circle.js","sourceRoot":"","sources":["../../src/demo-app/components/progress-circle/progress-circle.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  HostBinding,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Input\n} from '@angular/core';\n\n// TODO(josephperrott): Benchpress tests.\n\n/** A single degree in radians. */\nconst DEGREE_IN_RADIANS = Math.PI / 180;\n/** Duration of the indeterminate animation. */\nconst DURATION_INDETERMINATE = 667;\n/** Duration of the indeterminate animation. */\nconst DURATION_DETERMINATE = 225;\n/** Start animation value of the indeterminate animation */\nlet startIndeterminate = 3;\n/** End animation value of the indeterminate animation */\nlet endIndeterminate = 80;\n\n\nexport type ProgressCircleMode = 'determinate' | 'indeterminate';\n\ntype EasingFn = (currentTime: number, startValue: number,\n                 changeInValue: number, duration: number) => number\n\n\n/**\n * <md-progress-circle> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'md-progress-circle',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n  },\n  templateUrl: 'progress-circle.html',\n  styleUrls: ['progress-circle.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MdProgressCircle {\n  /** The id of the last requested animation. */\n  private _lastAnimationId: number = 0;\n\n  /** The id of the indeterminate interval. */\n  private _interdeterminateInterval: number;\n\n  /** The current path value, representing the progres circle. */\n  private _currentPath: string;\n  get currentPath() {\n    return this._currentPath;\n  }\n  set currentPath(path: string) {\n    this._currentPath = path;\n    // Mark for check as our ChangeDetectionStrategy is OnPush, when changes come from within the\n    // component, change detection must be called for.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Value of the progress circle.\n   *\n   * Input:number, defaults to 0.\n   * _value is bound to the host as the attribute aria-valuenow.\n   */\n  private _value: number = 0;\n  @Input()\n  @HostBinding('attr.aria-valuenow')\n  get value() {\n    return this._value;\n  }\n  set value(v: number) {\n    if (v) {\n      let newValue = clamp(v);\n      this._animateCircle(this.value, newValue, linearEase, DURATION_DETERMINATE, 0);\n      this._value = newValue;\n    }\n  }\n\n  /**\n   * Mode of the progress circle\n   *\n   * Input must be one of the values from ProgressMode, defaults to 'determinate'.\n   * mode is bound to the host as the attribute host.\n   */\n  @HostBinding('attr.mode')\n  @Input()\n  get mode() {\n    return this._mode;\n  }\n  set mode(m: ProgressCircleMode) {\n    if (m == 'indeterminate') {\n      this._startIndeterminateAnimation();\n    } else {\n      this._cleanupIndeterminateAnimation();\n    }\n    this._mode = m;\n  }\n  private _mode: ProgressCircleMode = 'determinate';\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {\n  }\n\n\n  /**\n   * Animates the circle from one percentage value to another.\n   *\n   * @param animateFrom The percentage of the circle filled starting the animation.\n   * @param animateTo The percentage of the circle filled ending the animation.\n   * @param ease The easing function to manage the pace of change in the animation.\n   * @param duration The length of time to show the animation, in milliseconds.\n   * @param rotation The starting angle of the circle fill, with 0Â° represented at the top center\n   *    of the circle.\n   */\n  private _animateCircle(animateFrom: number, animateTo: number, ease: EasingFn,\n                        duration: number, rotation: number) {\n    let id = ++this._lastAnimationId;\n    let startTime = now();\n    let changeInValue = animateTo - animateFrom;\n\n    // No need to animate it if the values are the same\n    if (animateTo === animateFrom) {\n      this.currentPath = getSvgArc(animateTo, rotation);\n    } else {\n      let animation = (currentTime: number) => {\n        let elapsedTime = Math.max(\n          0, Math.min((currentTime || now()) - startTime, duration));\n\n        this.currentPath = getSvgArc(\n          ease(elapsedTime, animateFrom, changeInValue, duration),\n          rotation\n        );\n\n        // Prevent overlapping animations by checking if a new animation has been called for and\n        // if the animation has lasted long than the animation duration.\n        if (id === this._lastAnimationId && elapsedTime < duration) {\n          requestAnimationFrame(animation);\n        }\n      };\n      requestAnimationFrame(animation);\n    }\n  }\n\n\n  /**\n   * Starts the indeterminate animation interval, if it is not already running.\n   */\n  private _startIndeterminateAnimation() {\n    let rotationStartPoint = 0;\n    let start = startIndeterminate;\n    let end =  endIndeterminate;\n    let duration = DURATION_INDETERMINATE;\n    let animate = () => {\n      this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\n      // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\n      rotationStartPoint = (rotationStartPoint + end) % 100;\n      let temp = start;\n      start = -end;\n      end = -temp;\n    };\n\n    if (!this._interdeterminateInterval) {\n      this._interdeterminateInterval = setInterval(\n        animate, duration + 50, 0, false);\n      animate();\n    }\n  }\n\n\n  /**\n   * Removes interval, ending the animation.\n   */\n  private _cleanupIndeterminateAnimation() {\n    if (this._interdeterminateInterval) {\n      clearInterval(this._interdeterminateInterval);\n      this._interdeterminateInterval = null;\n    }\n  }\n}\n\n\n/**\n * <md-spinner> component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <md-progress-circle> instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'md-spinner',\n  host: {\n    'role': 'progressbar',\n  },\n  templateUrl: 'progress-circle.html',\n  styleUrls: ['progress-circle.css'],\n})\nexport class MdSpinner extends MdProgressCircle {\n  constructor(changeDetectorRef: ChangeDetectorRef) {\n    super(changeDetectorRef);\n    this.mode = 'indeterminate';\n  }\n}\n\n\n/**\n * Module functions.\n */\n\n/** Clamps a value to be between 0 and 100. */\nfunction clamp(v: number) {\n  return Math.max(0, Math.min(100, v));\n}\n\n\n/**\n * Returns the current timestamp either based on the performance global or a date object.\n */\nfunction now() {\n  if (typeof performance !== 'undefined') {\n    return performance.now();\n  }\n  return Date.now();\n}\n\n\n/**\n * Converts Polar coordinates to Cartesian.\n */\nfunction polarToCartesian(radius: number, pathRadius: number, angleInDegrees: number) {\n  let angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\n\n  return (radius + (pathRadius * Math.cos(angleInRadians))) +\n    ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\n}\n\n\n/**\n * Easing function for linear animation.\n */\nfunction linearEase(currentTime: number, startValue: number,\n                    changeInValue: number, duration: number) {\n  return changeInValue * currentTime / duration + startValue;\n}\n\n\n/**\n * Easing function to match material design indeterminate animation.\n */\nfunction materialEase(currentTime: number, startValue: number,\n                      changeInValue: number, duration: number) {\n  let time = currentTime / duration;\n  let timeCubed = Math.pow(time, 3);\n  let timeQuad = Math.pow(time, 4);\n  let timeQuint = Math.pow(time, 5);\n  return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\n\n}\n\n\n/**\n * Determines the path value to define the arc.  Converting percentage values to to polar\n * coordinates on the circle, and then to cartesian coordinates in the viewport.\n *\n * @param currentValue The current percentage value of the progress circle, the percentage of the\n *    circle to fill.\n * @param rotation The starting point of the circle with 0 being the 0 degree point.\n * @return A string for an SVG path representing a circle filled from the starting point to the\n *    percentage value provided.\n */\nfunction getSvgArc(currentValue: number, rotation: number) {\n  // The angle can't be exactly 360, because the arc becomes hidden.\n  let maximumAngle = 359.99 / 100;\n  let startPoint = rotation || 0;\n  let radius = 50;\n  let pathRadius = 40;\n\n  let startAngle = startPoint * maximumAngle;\n  let endAngle = currentValue * maximumAngle;\n  let start = polarToCartesian(radius, pathRadius, startAngle);\n  let end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\n  let arcSweep = endAngle < 0 ? 0 : 1;\n  let largeArcFlag: number;\n\n  if (endAngle < 0) {\n    largeArcFlag = endAngle >= -180 ? 0 : 1;\n  } else {\n    largeArcFlag = endAngle <= 180 ? 0 : 1;\n  }\n\n  return `M${start}A${pathRadius},${pathRadius} 0 ${largeArcFlag},${arcSweep} ${end}`;\n}\n\nexport const MD_PROGRESS_CIRCLE_DIRECTIVES = [MdProgressCircle, MdSpinner];\n"]}