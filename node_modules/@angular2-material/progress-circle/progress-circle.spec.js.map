{"version":3,"file":"progress-circle.spec.js","sourceRoot":"","sources":["../../src/demo-app/components/progress-circle/progress-circle.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  it,\n  describe,\n  expect,\n  beforeEach,\n  inject,\n} from '@angular/core/testing';\nimport {TestComponentBuilder} from '@angular/compiler/testing';\nimport {Component, DebugElement} from '@angular/core';\nimport {By} from '@angular/platform-browser';\nimport {MdProgressCircle} from './progress-circle';\n\n\ndescribe('MdProgressCircular', () => {\n  let builder: TestComponentBuilder;\n\n  beforeEach(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n    builder = tcb;\n  }));\n\n  it('should apply a mode of \"determinate\" if no mode is provided.', (done: () => void) => {\n    builder\n      .overrideTemplate(TestApp, '<md-progress-circle></md-progress-circle>')\n      .createAsync(TestApp)\n      .then((fixture) => {\n        fixture.detectChanges();\n        let progressElement = getChildDebugElement(fixture.debugElement, 'md-progress-circle');\n        expect(progressElement.componentInstance.mode).toBe('determinate');\n        done();\n      });\n  });\n\n  it('should not modify the mode if a valid mode is provided.', (done: () => void) => {\n    builder\n      .overrideTemplate(TestApp, '<md-progress-circle mode=\"indeterminate\"></md-progress-circle>')\n      .createAsync(TestApp)\n      .then((fixture) => {\n        fixture.detectChanges();\n        let progressElement = getChildDebugElement(fixture.debugElement, 'md-progress-circle');\n        expect(progressElement.componentInstance.mode).toBe('indeterminate');\n        done();\n      });\n  });\n\n  it('should define a default value for the value attribute', (done: () => void) => {\n    builder\n      .overrideTemplate(TestApp, '<md-progress-circle></md-progress-circle>')\n      .createAsync(TestApp)\n      .then((fixture) => {\n        fixture.detectChanges();\n        let progressElement = getChildDebugElement(fixture.debugElement, 'md-progress-circle');\n        expect(progressElement.componentInstance.value).toBe(0);\n        done();\n      });\n  });\n\n  it('should clamp the value of the progress between 0 and 100', (done: () => void) => {\n    builder\n      .overrideTemplate(TestApp, '<md-progress-circle></md-progress-circle>')\n      .createAsync(TestApp)\n      .then((fixture) => {\n        fixture.detectChanges();\n        let progressElement = getChildDebugElement(fixture.debugElement, 'md-progress-circle');\n        let progressComponent = progressElement.componentInstance;\n\n        progressComponent.value = 50;\n        expect(progressComponent.value).toBe(50);\n\n        progressComponent.value = 999;\n        expect(progressComponent.value).toBe(100);\n\n        progressComponent.value = -10;\n        expect(progressComponent.value).toBe(0);\n        done();\n      });\n  });\n});\n\n\n/** Gets a child DebugElement by tag name. */\nfunction getChildDebugElement(parent: DebugElement, selector: string): DebugElement {\n  return parent.query(By.css(selector));\n}\n\n\n/** Test component that contains an MdButton. */\n@Component({\n  directives: [MdProgressCircle],\n  template: '',\n})\nclass TestApp {\n}\n"]}